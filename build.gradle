/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java'
apply plugin: 'maven'
apply from: "https://raw.githubusercontent.com/gocd/gocd-plugin-gradle-task-helpers/master/helper.gradle?_=${(int) (new Date().toInstant().epochSecond / 60)}"

gocdPlugin {
    id = 'cd.go.contrib.elastic-agent.openstack'
    pluginVersion = '0.14.0'
    goCdVersion = '19.5.0'
    name = 'OpenStack Elastic Agent Plugin'
    description = 'OpenStack Based Elastic Agent Plugins for GoCD'
    vendorName = 'ThoughtWorks, Inc.'
    vendorUrl = 'https://github.com/gocd-contrib/openstack-elastic-agent'

    githubRepo {
        owner = System.getenv('GITHUB_USER') ?: 'bob'
        repo = 'openstack-elastic-agents'
        token = System.getenv('GITHUB_TOKEN') ?: 'bad-token'
    }

    pluginProject = project

    prerelease = !"No".equalsIgnoreCase(System.getenv('PRERELEASE'))
    assetsToRelease = [project.tasks.jar]
}

group = 'cd.go.contrib'
version = gocdPlugin.fullVersion(project)
sourceCompatibility = 1.8
targetCompatibility = 1.8
repositories {
    jcenter()
    mavenLocal()
}

sourceSets {
    test {
        java {
            compileClasspath += configurations.compileOnly
            runtimeClasspath += configurations.compileOnly
        }
    }
}

dependencies {
    compileOnly group: 'cd.go.plugin', name: 'go-plugin-api', version: '19.5.0'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
    compile group: 'org.pacesys', name: 'openstack4j', version: '2.20'
    compile group: 'com.google.guava', name: 'guava', version: '28.0-jre'
    compile group: 'joda-time', name: 'joda-time', version: '2.10.2'
    compile group: 'commons-io', name: 'commons-io', version: '2.6'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5'
    compile group: 'commons-codec', name: 'commons-codec', version: '1.13'
    compile group: 'org.cache2k', name: 'cache2k-api', version: '1.2.2.Final'
    compile group: 'org.cache2k', name: 'cache2k-core', version: '1.2.2.Final'


    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '2.1'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.28.2'
    testCompile group: 'org.skyscreamer', name: 'jsonassert', version: '1.5.0'
}

test {
    testLogging {
        showStandardStreams = true

        exceptionFormat 'full'

        beforeSuite { suite ->
            if (suite.parent) {
                logger.quiet("Running ${suite.name}")
            }
        }

        afterSuite { suite, result ->
            if (suite.parent) {
                logger.quiet("Tests run: ${result.testCount}, Failures: ${result.failedTestCount}, Skipped: ${result.skippedTestCount}, Time elapsed: ${(result.endTime - result.startTime) / 1000.00} sec")
                if (result.resultType == TestResult.ResultType.FAILURE) {
                    logger.quiet("Test ${suite.name} FAILED")
                }
            } else {
                logger.quiet("Total tests run: ${result.testCount}, Failures: ${result.failedTestCount}, Skipped: ${result.skippedTestCount}, Time elapsed: ${(result.endTime - result.startTime) / 1000.00} sec")
            }
        }
    }
}

jar {
    from(configurations.compile) {
        into "lib/"
    }
    from(sourceSets.main.java) {
        into "/"
    }
}
