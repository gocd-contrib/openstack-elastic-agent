/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'se.patrikerdes.use-latest-versions' version '0.2.7'
    id 'com.github.ben-manes.versions' version '0.20.0'
}

apply plugin: 'java'
apply plugin: 'maven'

group = 'cd.go.contrib'
version = '0.14.0'
description = 'GoCD OpenStack Elastic Agents'

// these values that go into plugin.xml
project.ext.pluginDesc = [
        id         : 'cd.go.contrib.elastic-agent.openstack',
        version    : project.version,
        goCdVersion: '18.10.0',
        name       : 'Openstack Elastic Agent Plugin',
        description: 'Openstack Elastic Agent Plugin for GoCD',
        vendorName : 'ThoughtWorks Inc',
        vendorUrl  : 'https://github.com/gocd-contrib/openstack-elastic-agent.git'
]

// Force 1.7 compatibility to ensure that it works with older JVMs
sourceCompatibility = 1.8
targetCompatibility = 1.8

buildDir = "${projectDir}/target"


// In this section you declare where to find the dependencies of your project
repositories {
    jcenter()
    mavenLocal()
}

sourceSets {
    test {
        java {
            compileClasspath += configurations.compileOnly
            runtimeClasspath += configurations.compileOnly
        }
    }
}

dependencies {
    compileOnly group: 'cd.go.plugin', name: 'go-plugin-api', version: project.pluginDesc.goCdVersion
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
    compile group: 'org.pacesys', name: 'openstack4j', version: '2.20'
    compile group: 'com.google.guava', name: 'guava', version: '27.0.1-jre'
    compile group: 'joda-time', name: 'joda-time', version: '2.10.1'
    compile group: 'commons-io', name: 'commons-io', version: '2.6'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.8.1'
    compile group: 'commons-codec', name: 'commons-codec', version: '1.11'
    compile group: 'org.cache2k', name: 'cache2k-api', version: '1.2.2.Final'
    compile group: 'org.cache2k', name: 'cache2k-core', version: '1.2.0.Final'


    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '2.1'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.23.4'
    testCompile group: 'org.skyscreamer', name: 'jsonassert', version: '1.5.0'
}

processResources {
    from("src/main/resource-templates") {
        filesMatching('*') {
            expand project.pluginDesc
        }
    }
}

test {
    testLogging {
        showStandardStreams = true

        exceptionFormat 'full'

        beforeSuite { suite ->
            if (suite.parent) {
                logger.quiet("Running ${suite.name}")
            }
        }

        afterSuite { suite, result ->
            if (suite.parent) {
                logger.quiet("Tests run: ${result.testCount}, Failures: ${result.failedTestCount}, Skipped: ${result.skippedTestCount}, Time elapsed: ${(result.endTime - result.startTime) / 1000.00} sec")
                if (result.resultType == TestResult.ResultType.FAILURE) {
                    logger.quiet("Test ${suite.name} FAILED")
                }
            } else {
                logger.quiet("Total tests run: ${result.testCount}, Failures: ${result.failedTestCount}, Skipped: ${result.skippedTestCount}, Time elapsed: ${(result.endTime - result.startTime) / 1000.00} sec")
            }
        }
    }
}

jar {
    from(configurations.compile) {
        into "lib/"
    }
    from(sourceSets.main.java) {
        into "/"
    }
}
